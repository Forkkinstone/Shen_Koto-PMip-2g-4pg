# Задача 1
def psychological_test():
    print("Психологический тест: Склонность к риску или осторожности")
    
    # Инициализация счетчиков
    risk = 0
    caution = 0
    
    # Вопросы теста
    questions = [
        "Вы часто пробуете новые вещи, даже если они кажутся вам непонятными?",
        "Вы предпочитаете планировать все заранее или действовать по ситуации?",
        "Вы готовы взять на себя ответственность за неожиданные решения?",
        "Вы предпочитаете избегать конфликтов или можете постоять за себя?",
        "Вы часто импульсивны в своих действиях?"
    ]
    
    # Варианты ответов
    answers = {
        "Да": 1,
        "Нет": 0
    }
    
    # Задаем вопросы и считаем баллы
    for question in questions:
        print(question)
        answer = input("Введите 'Да' или 'Нет': ")
        while answer not in answers:
            print("Неправильный ответ. Пожалуйста, введите 'Да' или 'Нет'.")
            answer = input("Введите 'Да' или 'Нет': ")
        
        if answers[answer] == 1:
            risk += 1
        else:
            caution += 1
    
    # Выводим результат
    print("\nРезультаты теста:")
    print(f"Склонность к риску: {risk} баллов")
    print(f"Склонность к осторожности: {caution} баллов")
    
    if risk > caution:
        print("Вы склонны к риску и часто принимаете смелые решения.")
    elif risk < caution:
        print("Вы склонны к осторожности и предпочитаете тщательно обдумывать свои действия.")
    else:
        print("Вы балансируете между склонностью к риску и осторожностью.")

# Запускаем тест
psychological_test()



# Задача 2
s = randint(20, 30)

print("Начальное количество камней:", s)

while s >= 0:
    a = randint(1, 5)
    b = randint(-5, -1)
    print("Выберите один из двух ходов:")
    print("A:", a)
    print("B:", b)
    # Пользователь вводит букву A или B (латинскую)
    answer = input()
    if answer == "A":
        s += a
        print("S =", s)
    elif answer == "B":
        if s+b > 0:
            s+=b
            print("------------------------")
            print("S =", s)
        else:
            print("Победа")
            break
    elif answer == "X":
        break
    else:
        print("Неверный ввод")
        sys.exit(0)


Задача #3
import math

class Vector:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    # Сложение векторов
    def __add__(self, other):
        return Vector(self.x + other.x, self.y + other.y, self.z + other.z)

    # Вычитание векторов
    def __sub__(self, other):
        return Vector(self.x - other.x, self.y - other.y, self.z - other.z)

    # Скалярное умножение (вектор * вектор или вектор * число)
    def __mul__(self, other):
        if isinstance(other, Vector):  # Скалярное произведение
            return self.x * other.x + self.y * other.y + self.z * other.z
        elif isinstance(other, (int, float)):  # Умножение на число
            return Vector(self.x * other, self.y * other, self.z * other)
        else:
            raise TypeError("Unsupported operand type for *")

    # Унарный минус
    def __neg__(self):
        return Vector(-self.x, -self.y, -self.z)

    # Векторное произведение
    def __cross__(self, other):
        cx = self.y * other.z - self.z * other.y
        cy = self.z * other.x - self.x * other.z
        cz = self.x * other.y - self.y * other.x
        return Vector(cx, cy, cz)

    # Чтение и изменение координат через квадратные скобки
    def __getitem__(self, index):
        if index == 0:
            return self.x
        elif index == 1:
            return self.y
        elif index == 2:
            return self.z
        else:
            raise IndexError("Index out of range")

    def __setitem__(self, index, value):
        if index == 0:
            self.x = value
        elif index == 1:
            self.y = value
        elif index == 2:
            self.z = value
        else:
            raise IndexError("Index out of range")

    def cross(self, other):
        x = self.y * other.z - self.z * other.y
        y = self.z * other.x - self.x * other.z
        z = self.x * other.y - self.y * other.x
        return Vector(x, y, z)

    # Длина вектора (через abs)
    def __abs__(self):
        return math.sqrt(self.x**2 + self.y**2 + self.z**2)

    # Печать вектора (через str)
    def __str__(self):
        return f"Vector({self.x}, {self.y}, {self.z})"

def get_vector_input(prompt):
    while True:
        try:
            x, y, z = map(int, input(prompt).split())
            return Vector(x, y, z)
        except ValueError:
            print("Некорректный ввод. Пожалуйста, введите три числа через пробел.")


v1 = get_vector_input("Введите координаты первого вектора (x y z): ")
v2 = get_vector_input("Введите координаты второго вектора (x y z): ")

print("Сложение:", v1 + v2)
print("Вычитание:", v1 - v2)
print("Скалярное умножение:", v1 * v2)
print("Умножение на число:", v1 * 3)
print("Унарный минус:", -v1)
print("Векторное произведение:", v1.cross(v2))
print("Длина вектора v1:", abs(v1))

v1[0] = 10  # Изменение координаты x
print("Измененный вектор v1:", v1)
v1[0] = 10  # Изменение координаты x
print("Измененный вектор v1:", v1)
