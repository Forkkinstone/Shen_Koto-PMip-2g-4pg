#include <iostream>
#include <string>
#include <fstream>

const int MAX_WORDS = 5120;

bool Read(int& n, std::string words[MAX_WORDS]) {
    std::ifstream in("input.txt");
    if (!in.is_open()) {
        std::cerr << "File not opened" << std::endl;
        return false;
    }
    
    n = 0;
    while (in >> words[n] && n < MAX_WORDS) {
        n++;
    }

    return true;
}

bool isVowel(char c) {
    c = tolower(c);
    return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y');
}

bool hasDuplicateVowels(const std::string& word) {
    int vowelCount[26] = {0};
    for (char c : word) {
        if (isVowel(c)) {
            vowelCount[tolower(c) - 'a']++;
            if (vowelCount[tolower(c) - 'a'] >= 2) {
                return true;
            }
        }
    }
    return false;
}

void RemoveConsonants(int n, std::string words[MAX_WORDS]) {
    for (int i = 0; i < n; i++) {
        std::string newWord;
        for (char c : words[i]) {
            if (isVowel(c) || c == ' ' || c == ',') { // Assuming we want to keep spaces and commas
                newWord += c;
            }
        }
        words[i] = newWord;
    }
}

void DuplicateVowels(std::string& word) {
    std::string newWord;
    for (char c : word) {
        newWord += c;
        if (isVowel(c)) {
            newWord += c; // Duplicate vowel
        }
    }
    word = newWord;
}

void Sort(int n, std::string words[MAX_WORDS]) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (words[i] > words[j]) {
                std::swap(words[i], words[j]);
            }
        }
    }
}

bool isNotLessThan3Vowels(const std::string& word) {
    int count = 0;
    for (char c : word) {
        if (isVowel(c)) {
            count++;
        }
    }
    return count >= 3;
}

int main() {
    int n;
    std::string words[MAX_WORDS];

    if (!Read(n, words)) {
        return -1;
    }

    bool hasEqualVowels = false;
    for (int i = 0; i < n; i++) {
        if (hasDuplicateVowels(words[i])) {
            hasEqualVowels = true;
            break;
        }
    }

    if (hasEqualVowels) {
        RemoveConsonants(n, words);
    } else {
        for (int i = 0; i < n; i++) {
            if (isNotLessThan3Vowels(words[i])) {
                DuplicateVowels(words[i]);
            }
        }
    }

    Sort(n, words);

    for (int i = 0; i < n; i++) {
        if (!words[i].empty()) {
            std::cout << "<" << words[i] << ">" << std::endl;
        }
    }

    return 0;
}
